[gd_resource type="ShaderMaterial" load_steps=10 format=2]

[sub_resource type="VisualShaderNodeScalarOp" id=1]
default_input_values = [ 0, 0.0, 1, 1000.0 ]
operator = 3

[sub_resource type="VisualShaderNodeInput" id=2]
input_name = "texture"

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture" id=4]
source = 5

[sub_resource type="VisualShaderNodeVectorOp" id=5]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.001, 0.001, 0.001 ) ]
operator = 4

[sub_resource type="VisualShaderNodeScalarConstant" id=6]

[sub_resource type="VisualShaderNodeVectorOp" id=7]
operator = 1

[sub_resource type="VisualShaderNodeScalarUniform" id=8]
uniform_name = "Pixel_Size"

[sub_resource type="VisualShader" id=9]
code = "shader_type canvas_item;
uniform float Pixel_Size;



void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// ScalarUniform:9
	float n_out9p0 = Pixel_Size;

// ScalarOp:10
	float n_in10p1 = 1000.00000;
	float n_out10p0 = n_out9p0 / n_in10p1;

// VectorOp:6
	vec3 n_out6p0 = mod(n_out3p0, vec3(n_out10p0));

// VectorOp:8
	vec3 n_out8p0 = n_out3p0 - n_out6p0;

// Scalar:7
	float n_out7p0 = 0.000000;

// Input:2

// Texture:4
	vec3 n_out4p0;
	float n_out4p1;
	{
		vec4 TEXTURE_tex_read = textureLod(TEXTURE, n_out8p0.xy, n_out7p0);
		n_out4p0 = TEXTURE_tex_read.rgb;
		n_out4p1 = TEXTURE_tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out4p0;
	COLOR.a = n_out4p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -733, -68 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 480, 180 )
nodes/fragment/2/node = SubResource( 2 )
nodes/fragment/2/position = Vector2( -300, 320 )
nodes/fragment/3/node = SubResource( 3 )
nodes/fragment/3/position = Vector2( -500, 40 )
nodes/fragment/4/node = SubResource( 4 )
nodes/fragment/4/position = Vector2( 160, 140 )
nodes/fragment/6/node = SubResource( 5 )
nodes/fragment/6/position = Vector2( -340, 100 )
nodes/fragment/7/node = SubResource( 6 )
nodes/fragment/7/position = Vector2( -320, 220 )
nodes/fragment/8/node = SubResource( 7 )
nodes/fragment/8/position = Vector2( -40, 0 )
nodes/fragment/9/node = SubResource( 8 )
nodes/fragment/9/position = Vector2( -860, 140 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -640, 120 )
nodes/fragment/connections = PoolIntArray( 2, 0, 4, 2, 4, 1, 0, 1, 4, 0, 0, 0, 3, 0, 6, 0, 7, 0, 4, 1, 3, 0, 8, 0, 8, 0, 4, 0, 9, 0, 10, 0, 6, 0, 8, 1, 10, 0, 6, 1 )

[resource]
shader = SubResource( 9 )
shader_param/Pixel_Size = 2.0
