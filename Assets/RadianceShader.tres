[gd_resource type="VisualShader" load_steps=10 format=2]

[sub_resource type="VisualShaderNodeVectorFunc" id=38]
function = 5

[sub_resource type="VisualShaderNodeScalarOp" id=43]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=44]
operator = 3

[sub_resource type="VisualShaderNodeScalarFunc" id=45]
function = 15

[sub_resource type="VisualShaderNodeExpression" id=46]
size = Vector2( 474, 214 )
expression = "color = texture(TEXTURE, UV).rgb;"

[sub_resource type="VisualShaderNodeScalarUniform" id=39]
uniform_name = "Value"

[sub_resource type="VisualShaderNodeVectorDecompose" id=40]

[sub_resource type="VisualShaderNodeVectorFunc" id=41]
function = 4

[sub_resource type="VisualShaderNodeVectorCompose" id=42]

[resource]
code = "shader_type canvas_item;
uniform float Value;



void vertex() {
// Output:0

}

void fragment() {
// Expression:15
	vec3 n_out15p0;
	n_out15p0 = vec3(0.0, 0.0, 0.0);
	{
		n_out15p0 = texture(TEXTURE, UV).rgb;
	}

// VectorFunc:8
	vec3 n_out8p0;
	{
		vec3 c = n_out15p0;
		vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
		vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
		vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
		float d = q.x - min(q.w, q.y);
		float e = 1.0e-10;
		n_out8p0 = vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
	}

// VectorDecompose:7
	float n_out7p0 = n_out8p0.x;
	float n_out7p1 = n_out8p0.y;
	float n_out7p2 = n_out8p0.z;

// ScalarUniform:6
	float n_out6p0 = Value;

// ScalarOp:11
	float n_out11p0 = n_out7p2 * n_out6p0;

// ScalarFunc:14
	float n_out14p0 = round(n_out11p0);

// ScalarOp:13
	float n_out13p0 = n_out14p0 / n_out6p0;

// VectorCompose:9
	vec3 n_out9p0 = vec3(n_out7p0, n_out7p1, n_out13p0);

// VectorFunc:10
	vec3 n_out10p0;
	{
		vec3 c = n_out9p0;
		vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
		vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
		n_out10p0 = c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
	}

// Output:0
	COLOR.rgb = n_out10p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -138, 28 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 2100, 180 )
nodes/fragment/6/node = SubResource( 39 )
nodes/fragment/6/position = Vector2( 740, 380 )
nodes/fragment/7/node = SubResource( 40 )
nodes/fragment/7/position = Vector2( 740, 180 )
nodes/fragment/8/node = SubResource( 41 )
nodes/fragment/8/position = Vector2( 520, 200 )
nodes/fragment/9/node = SubResource( 42 )
nodes/fragment/9/position = Vector2( 1680, 180 )
nodes/fragment/10/node = SubResource( 38 )
nodes/fragment/10/position = Vector2( 1880, 180 )
nodes/fragment/11/node = SubResource( 43 )
nodes/fragment/11/position = Vector2( 960, 260 )
nodes/fragment/13/node = SubResource( 44 )
nodes/fragment/13/position = Vector2( 1340, 260 )
nodes/fragment/14/node = SubResource( 45 )
nodes/fragment/14/position = Vector2( 1140, 260 )
nodes/fragment/15/node = SubResource( 46 )
nodes/fragment/15/position = Vector2( 20, 160 )
nodes/fragment/15/size = Vector2( 474, 214 )
nodes/fragment/15/input_ports = ""
nodes/fragment/15/output_ports = "0,1,color;"
nodes/fragment/15/expression = "color = texture(TEXTURE, UV).rgb;"
nodes/fragment/connections = PoolIntArray( 8, 0, 7, 0, 7, 0, 9, 0, 7, 1, 9, 1, 9, 0, 10, 0, 10, 0, 0, 0, 7, 2, 11, 0, 6, 0, 11, 1, 11, 0, 14, 0, 14, 0, 13, 0, 6, 0, 13, 1, 13, 0, 9, 2, 15, 0, 8, 0 )
